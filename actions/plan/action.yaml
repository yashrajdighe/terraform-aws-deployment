name: terraform-plan
description: This action runs terraform plan

inputs:
  TF_VAR_env:
    description: env
    required: true
  TERRAFORM_VERSION:
    required: true
    description: version of terraform cli
  AWS_CLI_ASSUME_ROLE:
    required: true
    description: aws assume role arn
  TF_STATE_BUCKET_NAME:
    required: true
    description: aws s3 bucket name to store tf states
  TF_STATE_BUCKET_REGION:
    required: true
    description: aws s3 bucket region

runs:
  using: composite
  steps:
  - name: Configure AWS Credentials
    id: aws-cli-creds
    uses: aws-actions/configure-aws-credentials@v4
    with:
      aws-region: us-east-1
      role-to-assume: ${{ inputs.AWS_CLI_ASSUME_ROLE }}
      output-credentials: true
  - name: set credentials
    shell: bash
    working-directory: .
    run: |
      echo "AWS_ACCESS_KEY_ID=${{ steps.aws-cli-creds.outputs.aws-access-key-id }}" >> $GITHUB_ENV
      echo "AWS_SECRET_ACCESS_KEY=${{ steps.aws-cli-creds.outputs.aws-secret-access-key }}" >> $GITHUB_ENV
  - uses: actions/checkout@v3
  - uses: hashicorp/setup-terraform@v3
    with:
      terraform_version: ${{ inputs.TERRAFORM_VERSION }}
      terraform_wrapper: false
  - name: test
    shell: bash
    run: |
      ls
      pwd
      date
  - name: Terraform fmt
    id: fmt
    shell: bash
    working-directory: infra
    run: terraform fmt -check
    continue-on-error: true
  - name: Terraform Init
    shell: bash
    working-directory: infra
    id: init
    run: |
      terraform init \
      -backend-config="bucket=${{ inputs.TF_STATE_BUCKET_NAME }}" \
      -backend-config="key=terraform-aws-deployment/${{ inputs.TF_VAR_env }}/terraform.tfstate" \
      -backend-config="region=${{ inputs.TF_STATE_BUCKET_REGION }}"
  - name: Terraform Validate
    shell: bash
    working-directory: infra
    id: validate
    run: terraform validate -no-color
  - name: Terraform Plan
    shell: bash
    working-directory: infra
    id: plan
    run: terraform plan -no-color
    continue-on-error: true
